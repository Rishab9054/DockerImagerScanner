name: Docker Image Security Scanner

on:
  repository_dispatch:
    types: [docker-scan-request]

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to write scan results
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Pull Docker image
        run: |
          echo "Pulling ${{ github.event.client_payload.image_name }}:${{ github.event.client_payload.image_tag }}"
          docker pull ${{ github.event.client_payload.image_name }}:${{ github.event.client_payload.image_tag }}
      
      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      - name: Scan Docker image with Trivy
        id: scan
        continue-on-error: true
        run: |
          mkdir -p scan-results
          IMAGE_NAME="${{ github.event.client_payload.image_name }}:${{ github.event.client_payload.image_tag }}"
          trivy image --format json --output scan-results/raw_results.json $IMAGE_NAME
          echo "TRIVY_EXIT_CODE=$?" >> $GITHUB_ENV
      
      - name: Process scan results
        run: |
          python -c "
import json
import os

# Load Trivy results
with open('scan-results/raw_results.json', 'r') as f:
    data = json.load(f)

# Initialize result structure
result = {
    'status': 'success',
    'image': '${{ github.event.client_payload.image_name }}:${{ github.event.client_payload.image_tag }}',
    'vulnerabilities': []
}

# Process vulnerabilities
has_critical = False
for result_item in data.get('Results', []):
    for vuln in result_item.get('Vulnerabilities', []):
        if vuln.get('Severity') in ['CRITICAL', 'HIGH']:
            has_critical = True
            result['vulnerabilities'].append(f\"{vuln.get('VulnerabilityID')}: {vuln.get('Severity')} - {vuln.get('Title')}\")

# Set overall status
if has_critical or int(os.environ.get('TRIVY_EXIT_CODE', '0')) != 0:
    result['status'] = 'failure'

# Write results to file
with open(f\"scan-results/${{ github.event.client_payload.run_id }}.json\", 'w') as f:
    json.dump(result, f)
          "
      
      - name: Commit and push results
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          mkdir -p scan-results
          
          git add scan-results/${{ github.event.client_payload.run_id }}.json
          git commit -m "Add scan results for ${{ github.event.client_payload.image_name }}:${{ github.event.client_payload.image_tag }}"
          git push